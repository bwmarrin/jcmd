#!/bin/sh 

############################################################ SCRIPT DESCRIPTION
# FreeBSD Jail Commands by Bruce Marriner <bruce@sqls.net>
# A script for creating and working with FreeBSD jails.
#
# Jail Commands was wrote mostly from scratch however this script is influenced
# by and contains snippts from the FreeBSD handbook, freebsd-update, portsnap, 
# mkdir, rmdir, and the ZFS tools.
#
# Jail Commands FAQ:
#
# Q) Why not just follow the Handbook?
# a) Because after a dozen jails (or maybe less) following the Handbook method 
# each time might become cumbersome for some.
#
# Q) Why not just use ezJail?
# a) Good question! ezJail is thoroughly tested, has more features, is better 
# supported, and is probably safer.  You should definitely use it instead.
#
# Q) Wait, what? Why didn't you just use ezJail then?
# a) Well. I've always enjoyed "doing it myself" but there are a few reasons.
# 
# a1) I like understanding the "how and why" and when making Jail Commands I
# was able to learn a lot about how jails work and how to set them up. This was
# an educational experience for me and it was well worth the time invested.
#
# a2) ezJail is almost like a whole different jail system.  It uses it's own 
# configuration, rc scripts, and commands. I wanted to stick to using the 
# default FreeBSD configuration methods and command line tools where possible.
#
# a3) ezJail does not seem to work with existing jails made using the FreeBSD
# handbook method or the existing FreeBSD jail commands and I wanted a tool 
# that would.
#
# Q) What's your goal with Jail Commands?
# a) To expand upon the default FreeBSD jail commands and configuration methods
# with additional commands for creating and working with jails that work along 
# side the normal FreeBSD jail commands.



####################################################################### LICENSE
# FreeBSD Jail Commands is licensed using the FreeBSD License.
# https://www.freebsd.org/copyright/freebsd-license.html
# http://en.wikipedia.org/wiki/BSD_licenses
#
# Copyright (c) 2013-2017, Bruce Marriner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.



################################################################################
#### Usage function -- called from command-line handling code.

usage () {
    cat <<EOF
    usage: `basename $0` [options] command [jailname]


    Options:
    -d <destdir>   -- Destination directory
    -j <threads#>  -- Number of Threads to use

    Commands:
    mklinks -- Create symbolic links in /usr/local/bin for jcmds
    rmlinks -- Remove symbolic links in /usr/local/bin for jcmds 
    lslinks -- List symbolic links in /usr/local/bin for jcmds

    buildworld   -- Build userland from /usr/src source 
    installworld -- Install userland from /usr/src source
    distribution -- Install distrubution from /usr/src/etc

    make      -- Make a new jail
    up        -- Bring jail up
    down      -- Shutdown jail
    restart   -- Restart a jail
    shell|sh  -- Open shell inside jail
    login     -- Login to jail
    remove    -- Remove jail files 
    update    -- Update a jail to latest patch level
    ids       -- Run IDS test on jail
EOF
exit 0
}



################################################################################
#### Configuration Settings
#### You can override these settings in global or user configuration file.

# The shell to use for jcmd_shell method
jcmd_shell='sh'

# The distribution source to use when creating a new jail
# bsdinstall - use bsdinstall jail command (recommended)
# binary     - Download binary distribution files
# source     - Use /usr/src (buildworld)
jcmd_source='bsdinstall'

# The base path of all jails
jcmd_basepath='/usr/jails'

# Read in configuration files
# System settings, overrides defaults.
[ -f /usr/local/etc/jcmd.conf ] && . /usr/local/etc/jcmd.conf

# User settings, overrides defaults & system settings.
[ -f ~/.jcmdrc ] && . ~/.jcmdrc


################################################################################
#### Builtin Variables
jcmd_cmd=`basename -- $0`
jcmd_file=`readlink -f $0`
jcmd_version='0.0.1'
jcmd_name='FreeBSD Jail Commands'            
jcmd_author='Bruce Marriner <bruce@sqls.net>'
jcmd_copyright="Copyright 2013-2018 ${jcmd_author}. All rights reserved."




################################################################################
#### Core functionality -- the actual work gets done here

#-------------------------------------------------------------------------------
# Jail Commands - mklinks
# Create symbolic links in /usr/local/bin for jcmds
jcmd-mklinks () {
echo "Jail Commands  -  Make Links"

ln -s $jcmd_file /usr/local/bin/jcmd
ln -s $jcmd_file /usr/local/bin/jup
ln -s $jcmd_file /usr/local/bin/jdown
ln -s $jcmd_file /usr/local/bin/jsh

jcmd-lslinks
}

#-------------------------------------------------------------------------------
# Jail Commands - rmlinks
# Remove symbolic links in /usr/local/bin for jcmds
jcmd-rmlinks () {
echo "Jail Commands  -  Remove Links"

jcmd-lslinks
find -L /usr/local/bin -samefile $jcmd_file -exec rm {} \;
}

#-------------------------------------------------------------------------------
# Jail Commands - lslinks
# Create symbolic links in /usr/local/bin for jcmds
jcmd-lslinks () {
echo "Jail Commands  -  List Links"

find -L /usr/local/bin -samefile $jcmd_file
}

#-------------------------------------------------------------------------------
# Jail Commands - cleanworld
# This cleans the /usr/obj direction so a fresh buildworld can be run
jcmd-cleanworld () {
echo "Jail Commands  -  Clean World"

cd /usr/obj
chflags -R noschg *
rm -rf *
}
#-------------------------------------------------------------------------------
# Jail Commands - buildworld
# This function follows the FreeBSD handbook steps for building from source.
# https://www.freebsd.org/doc/handbook/jails-build.html
# https://www.freebsd.org/doc/handbook/makeworld.html
jcmd-buildworld () {
echo "Jail Commands  -  Build World"

cd /usr/src
time make $jcmd_threads buildworld
}

#------------------------------------------------------------------------------
# Jail Commands - installworld
# This function follows the FreeBSD handbook steps for installing from source.
# https://www.freebsd.org/doc/handbook/jails-build.html

jcmd-installworld () {
echo "Jail Commands  -  Install World"

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

[ ! -d $jcmd_destdir ] && exerr "Destination Directory does not exist, cannot continue."

cd /usr/src
make installworld DESTDIR=${jcmd_destdir}
}


#------------------------------------------------------------------------------
# Jail Commands - distribution -b basedir
# This function follows the FreeBSD handbook steps for installing from source.
# https://www.freebsd.org/doc/handbook/jails-build.html
jcmd-distribution () {
echo "Jail Commands  -  Distribution"

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

[ ! -d $jcmd_destdir ] && exerr "Destination Directory does not exist, cannot continue."

cd /usr/src
make distribution DESTDIR=${jcmd_destdir}
}


#-------------------------------------------------------------------------------
# Jail Commands - make
# Make creates a new jail
jcmd-make () {
echo "Jail Commands  -  Make"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail Name not provided, cannot continue."
    exerr ${usage}
    exit
fi

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

[  -d $jcmd_destdir ] && exerr "Destination Directory already exists, cannot continue."

# Create the folder
mkdir -p ${jcmd_destdir}

case $jcmd_source in
    "bsdinstall")
        #/usr/libexec/bsdinstall/jail $jcmd_jailname $jcmd_destdir
        bsdinstall jail $jcmd_jailname $jcmd_destdir
        ;;
    "binary")
        echo Binary install not implemented yet.
        ;;
    "source")
        jcmd-installworld
        jcmd-distribution
        ;;
    *)
        echo Unsupported jail source method
        ;;
esac

# Configure an initial rc.conf, should be customized by user.
echo "#
hostname=\"${jcmd_jailname}\"
rpcbind_enable=\"NO\"              # Disable RPC daemon
cron_flags=\"\$cron_flags -J 15\"   # Prevent lots of jails running cron jobs at the same time
syslogd_flags=\"-ss\"              # Disable syslogd listening for incoming connections
sendmail_enable=\"NONE\"           # Comppletely disable sendmail
clear_tmp_enable=\"YES\"           # Clear /tmp at startup" >> ${jcmd_destdir}/etc/rc.conf

# Copy over host resolv.conf and timezone 
cp /etc/resolv.conf ${jcmd_destdir}/etc/resolv.conf
cp /etc/localtime ${jcmd_destdir}/etc/localtime

echo Please review $jcmd_destdir/etc/rc.conf, some initial values were added.
echo Jail resolv.conf was copied from Host, adjust if needed.
echo Jail timezone was set to match Host timezone, adjust if needed.
echo You must create a jail configuration in /etc/jail.conf and a fstab file
}

#-------------------------------------------------------------------------------
# Jail Commands - list
# List active jails
jcmd-list () {
jls
}

#-------------------------------------------------------------------------------
# Jail Commands - up
# Start up a existing Jail
jcmd-up () {
echo "Jail Commands  -  Up"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail Name not provided, cannot continue."
    exerr ${usage}
    exit
fi

#jail -c ${jcmd_jailname}
service jail onestart ${jcmd_jailname}

}

#-------------------------------------------------------------------------------
# Jail Commands - shell
# Open a shell session within the Jail
jcmd-sh() { 
jcmd-shell 
}
jcmd-shell () {
echo "Jail Commands  -  Shell (${jcmd_jailname})"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail name not provided, cannot continue."
    exerr ${usage}
    exit
fi

jexec ${jcmd_jailname} ${jcmd_shell}
}


#-------------------------------------------------------------------------------
# Jail Commands - login
# Login to the Jail
jcmd-login () {
echo "Jail Commands  -  Login (${jcmd_jailname})"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail Name not provided, cannot continue."
    exerr ${usage}
    exit
fi

jexec ${jcmd_jailname} /usr/libexec/getty Pc
}


#-------------------------------------------------------------------------------
# Jail Commands - down
# Shut down a running Jail
jcmd-down () {
echo "Jail Commands  -  Down"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail Name not provided, cannot continue."
    exerr ${usage}
    exit
fi

#jail -r ${jcmd_jailname}
service jail onestop ${jcmd_jailname}

}


#-------------------------------------------------------------------------------
# Jail Commands - restart
# Restart a running Jail
jcmd-restart () {
echo "Jail Commands  -  Restart"

if [ -z "$jcmd_jailname" ]
then
    echo "Jail Name not provided, cannot continue."
    exerr ${usage}
    exit
fi

#jail -rc ${jcmd_jailname}
service jail restart ${jcmd_jailname}
}

#-------------------------------------------------------------------------------
# Jail Commands - remove
# Remove all files associated with a specific Jail
jcmd-remove () {
echo "Jail Commands  -  Remove"

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

[ ! -d $jcmd_destdir ] && exerr "Destination Directory does not exist, cannot continue."

echo "About to permentantly delete ${jcmd_destdir} press CTRL-C to abort"
echo 3
sleep 1
echo 2
sleep 2
echo 1
sleep 1
echo "Permentantly deleting ${jcmd_destdir}..."
chflags -R noschg ${jcmd_destdir}
rm -rf ${jcmd_destdir}

echo "You may now want to delete any /etc/jail.conf entry"
echo "along with any /etc/fstab.jailname if used."
}

#-------------------------------------------------------------------------------
# update - update the jail to the latest patch version
jcmd-update () {

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

echo Host Version `freebsd-version`
echo Jail Version `$jcmd_destdir/bin/freebsd-version`
freebsd-update --currently-running `$jcmd_destdir/bin/freebsd-version` -b $jcmd_destdir fetch install

}


#-------------------------------------------------------------------------------
# ids - run freebsd-update IDS test on jail
jcmd-ids () {

if [ -z "$jcmd_destdir" ]
then
    echo "Destination Directory not provided, cannot continue."
    exerr ${usage}
    exit
fi

freebsd-update --currently-running `$jcmd_destdir/bin/freebsd-version` -b $jcmd_destdir IDS

}


################################################################################
#### Main functions -- call parameter-handling and core functions

#-------------------------------------------------------------------------------
# Exit with Error
exerr () 
{ 
    echo -e "$*" >&2 ; 
    exit 1; 
}


################################################################################
#### Parameter handling functions.

#-------------------------------------------------------------------------------
# Parse the command line arguments
parse_cmdline () {

    # Parse global options
    while getopts d:j: opt; do
        case $opt in
            d)
                jcmd_destdir="${OPTARG}"
                shift
                shift
                ;;
            j)
                jcmd_threads="-j${OPTARG}"
                shift
                shift
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                usage
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                usage
                ;;
            *)
                echo "Unknown option"
                usage
                ;;
        esac
    done    

    # figure out the Command to run
    if [ $jcmd_cmd != "jcmd" ]
    then
        jcmd_run=jcmd-${jcmd_cmd#j}
    elif [ $# -gt 0 ]
    then
        jcmd_run=jcmd-$1
        shift
    fi

    if ! type $jcmd_run 2>/dev/null | grep -q 'function' ; then
        echo "$jcmd_run is not a valid function."; 
        exerr usage
    fi

    # If we have anything left it should be the jailname
    if [ $# -gt 0 ]; then
        jcmd_jailname=$1
        shift
    fi

    # if no destination folder was set, but a jailname was given, guess it.
    if [ -z "$jcmd_destdir" ]
    then
        if [ -n "$jcmd_jailname" ]
        then
            if [ -n "$jcmd_basepath" ]
            then
                jcmd_destdir=$jcmd_basepath/$jcmd_jailname
            fi
        fi
    fi
}



################################################################################
#### Entry Point

# Make sure we find utilities from the base system
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:${PATH}

# Set LC_ALL in order to avoid problems with character ranges like [A-Z].
export LC_ALL=C

# Parse command line for options, command, and jailname.
parse_cmdline $@

# Run the parsed command
$jcmd_run


################################################################################
#### Exit Normally
