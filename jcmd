#!/bin/sh 

############################################################ SCRIPT DESCRIPTION
# FreeBSD Jail Commands by Bruce Marriner <bruce@sqls.net>
# A script for creating and working with FreeBSD jails.
#
# Jail Commands was wrote mostly from scratch however this script is influenced
# by and contains snippts from the FreeBSD handbook, freebsd-update, portsnap, 
# mkdir, rmdir, and the ZFS tools.
#
# Jail Commands mini FAQ :
#
# Q) Why not just follow the Handbook?
# a) Because after a dozen jails (or maybe less) following the Handbook method 
# each time might become cumbersome for some.
#
# Q) Why not just use ezJail?
# a) Good question! ezJail is thoroughly tested, has more features, is better 
# supported, and is probably safer.  You should definitely use it instead.
#
# Q) Wait, what? Why didn't you just use ezJail then?
# a) Well. I've always enjoyed "doing it myself" but there are a few reasons.
# 
# a1) I like understanding the "how and why" and when making Jail Commands I
# was able to learn a lot about how jails work and how to set them up. This was
# an educational experience for me and it was well worth the time invested.
#
# a2) ezJail is almost like a whole different jail system.  It uses it's own 
# configuration, rc scripts, and commands. I wanted to stick to using the 
# default FreeBSD configuration methods and command line tools where possible.
#
# a3) ezJail does not seem to work with existing jails made using the FreeBSD
# handbook method or the existing FreeBSD jail commands and I wanted a tool 
# that would.
#
# Q) What's your goal with Jail Commands?
# a) To expand upon the default FreeBSD jail commands and configuration methods
# with additional commands for creating and working with jails that work along 
# side the normal FreeBSD jail commands.



####################################################################### LICENSE
# FreeBSD Jail Commands is licensed using the FreeBSD License.
# https://www.freebsd.org/copyright/freebsd-license.html
# http://en.wikipedia.org/wiki/BSD_licenses
#
# Copyright (c) 2013-2017, Bruce Marriner
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer. 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies, 
# either expressed or implied, of the FreeBSD Project.



################################################################################
#### Usage function -- called from command-line handling code.

usage () {
	cat <<EOF
usage: `basename $0` [global options] command [command options] ...

Global Options:
  -? optarg    -- PLACE HOLDER PLACE HOLDER
                  (default: PLACEHOLDER)
  -?           -- PLACE HOLDER
  -b basedir   -- Operate on a system mounted at basedir
                  (default: /)
  -d workdir   -- Store working files in workdir
                  (default: /var/db/freebsd-update/)
  -f conffile  -- Read configuration options from conffile
                  (default: /usr/local/etc/jcmd.conf)
  -r release   -- Target for upgrade (e.g., 6.2-RELEASE)
  -s server    -- Server from which to fetch updates
                  (default: update.FreeBSD.org)

  -i           -- interactive mode
  -x           -- trace mode
  -j jail      -- name of a specific jail


Commands:
  buildworld   -- Build userland from /usr/src source 
   -j threads  -- Number of threads to use when building
  installworld -- Install userland from /usr/src source
  distribution -- Install distrubution configuration files from /usr/src/etc
  placeholder  -- PLACE HOLDER ..  . . .. as  asdasd adsfa
EOF
	exit 0
}



################################################################################
#### Configuration processing functions

# DEFAULT SETTINGS
jcmd_cmd=`basename -- $0`
jcmd_version='0.0.1'
jcmd_name='FreeBSD Jail Commands'            
jcmd_author='Bruce Marriner <bruce@sqls.net>'
jcmd_copyright="Copyright 2013-2018 ${jcmd_author}. All rights reserved."
jcmd_shell='csh'
jcmd_source='source' # dist for distribution files, source for /usr/src 



# OPTIONAL SETTINGS
# These are here as a reference to additional settings that can be added to
# your local configuration files (see next section)
jcmd_base_path='' # The base filesystem path for new jails
jcmd_base_zfs=''  # The base ZFS pool/dataset for new jails (when using ZFS)



# LOAD SETTINGS
# Global settings, overrides defaults.
[ -f /usr/local/etc/jcmd.conf ] && . /usr/local/etc/jcmd.conf

# User settings, overrides defaults & global settings.
[ -f ~/.jcmdrc ] && . ~/.jcmdrc



################################################################################
#### Parameter handling functions.

#-------------------------------------------------------------------------------
# Parse the command line

parse_cmdline () {

    # Parse global options
    while getopts ":d:b:t:j:" opt; do
        case $opt in
            j)
                jcmd_jailname="${OPTARG}"
                shift
                ;;
            b)
                jcmd_basedir="${OPTARG}"
                shift
                ;;
            t)
                jcmd_threads="${OPTARG}"
                shift
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                usage
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                usage
                ;;
            *)
                usage
                ;;
        esac
        shift
    done    

    # Parse action commands
    while [ $# -gt 0 ]; do
        case "$1" in
            buildworld | installworld |  distribution | make | remove | start | stop | restart | shell | login)
                COMMANDS="${COMMANDS} $1"

                # TODO: Add here, code to parse command specific options.
                ;;
            *)
                usage
                ;;
        esac
        shift
    done

    # If there is not at least 1 action command, abort with usage info.
    if [ -z "${COMMANDS}" ]; then
        usage
    fi
}




################################################################################
#### Core functionality -- the actual work gets done here

#-------------------------------------------------------------------------------
# Jail Commands - cleanworld
# This cleans the /usr/obj direction so a fresh buildworld can be run
jcmd_cleanworld () {

    echo "Jail Commands  -  Clean World"
    echo "Args Left: $@"

    cd /usr/obj
    chflags -R noschg *
    rm -rf *
}
#-------------------------------------------------------------------------------
# Jail Commands - buildworld
# This function follows the FreeBSD handbook steps for building from source.
# https://www.freebsd.org/doc/handbook/jails-build.html
# https://www.freebsd.org/doc/handbook/makeworld.html
jcmd_buildworld () {

    echo "Jail Commands  -  Build World"
    echo "Args Left: $@"

    cd /usr/src
    time make buildworld
}

#------------------------------------------------------------------------------
# Jail Commands - installworld -b basedir
# This function follows the FreeBSD handbook steps for installing from source.
# https://www.freebsd.org/doc/handbook/jails-build.html

jcmd_installworld () {

    echo "Jail Commands  -  Install World"
    echo "Args Left: $@"

    if [ -z "$jcmd_basedir" ]
    then
        echo "Jail Base Directory not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    [ ! -d $jcmd_basedir ] && exerr "Jail Base Directory does not exist, cannot continue."

    cd /usr/src
    make installworld DESTDIR=${jcmd_basedir}
}


#------------------------------------------------------------------------------
# Jail Commands - distribution -b basedir
# This function follows the FreeBSD handbook steps for installing from source.
# https://www.freebsd.org/doc/handbook/jails-build.html
jcmd_distribution () {

    echo "Jail Commands  -  Distribution"
    echo "Args Left: $# $@"

    if [ -z "$jcmd_basedir" ]
    then
        echo "Jail Base Directory not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    [ ! -d $jcmd_basedir ] && exerr "Jail Base Directory does not exist, cannot continue."

    cd /usr/src
    make distribution DESTDIR=${jcmd_basedir}
}


#-------------------------------------------------------------------------------
# Jail Commands - make
# Make creates a new jail
jcmd_make () {

    echo "Jail Commands  -  Make"

    # need a jcmd_rootdir so base can be set off name

    if [ -z "$jcmd_basedir" ]
    then
        echo "Jail Base Directory not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail Name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    [  -d $jcmd_basedir ] && exerr "Jail Base Directory already exists, cannot continue."

    # Create the folder and copy over world/dist files
    mkdir -p ${jcmd_basedir}
    jcmd_installworld
    jcmd_distribution 

    # Install Ports Collection - should be optional
    portsnap -p ${jcmd_basedir}/usr/ports fetch extract

    # Mimic host system to initialize the Jail with some hopefully sane defaults
    cp /etc/resolv.conf ${jcmd_basedir}/etc/resolv.conf
    cp /etc/localtime ${jcmd_basedir}/etc/localtime

    # Configure an initial rc.conf, should be customized by user.
    echo "#
hostname=\"${jcmd_jailname}\"
rpcbind_enable=\"NO\"              # Disable RPC daemon
cron_flags=\"\$cron_flags -J 15\"   # Prevent lots of jails running cron jobs at the same time
syslogd_flags=\"-ss\"              # Disable syslogd listening for incoming connections
sendmail_enable=\"NONE\"           # Comppletely disable sendmail
clear_tmp_enable=\"YES\"           # Clear /tmp at startup
sshd_enable=\"YES\"                # Enable sshd" > ${jcmd_basedir}/etc/rc.conf


    # Echo out a jail{} config skeleton to add to /etc/jail.conf
    echo You must now create a jail configuration file in /etc/jail.conf

    # 
}


#-------------------------------------------------------------------------------
# Jail Commands - up
# Start up a existing Jail
jcmd_up () {

    echo "Jail Commands  -  Up"

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail Name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    # I like how this displays more startup info.
    jail -c ${jcmd_jailname}
    # OR? below?
    # Does the above or below respect jail.conf settings?
    #service jail onestart ${jcmd_jailname}

}

#-------------------------------------------------------------------------------
# Jail Commands - shell
# Open a shell session within the Jail
jcmd_shell () {

    echo "Jail Commands  -  Shell (${jcmd_jailname})"

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    jexec ${jcmd_jailname} ${jcmd_shell}
}


#-------------------------------------------------------------------------------
# Jail Commands - login
# Login to the Jail
jcmd_login () {

    echo "FreeBSD Jail Commands  -  Login (${jcmd_jailname})"

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail Name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    jexec ${jcmd_jailname} /usr/libexec/getty Pc
}


#-------------------------------------------------------------------------------
# Jail Commands - down
# Shut down a running Jail
jcmd_down () {

    echo "FreeBSD Jail Commands  -  Down"

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail Name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    # I like how this displays more startup info.
    jail -r ${jcmd_jailname}
    # OR? below?
    # Does the above or below respect jail.conf settings?
#    service jail onestop ${jcmd_jailname}

}


#-------------------------------------------------------------------------------
# Jail Commands - restart
# Restart a running Jail
jcmd_restart () {

    echo "Jail Commands  -  Restart"

    if [ -z "$jcmd_jailname" ]
    then
        echo "Jail Name not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    jail -rc ${jcmd_jailname}
}

#-------------------------------------------------------------------------------
# Jail Commands - remove
# Remove all files associated with a specific Jail
jcmd_remove () {

    echo "Jail Commands  -  Remove"

    if [ -z "$jcmd_basedir" ]
    then
        echo "Jail Base Directory not provided, cannot continue."
        exerr ${usage}
        exit
    fi

    [ ! -d $jcmd_basedir ] && exerr "Jail Base Directory does not exist, cannot continue."

    chflags -R noschg ${jcmd_basedir}
    rm -rfv ${jcmd_basedir}
    
    echo "You may now want to delete any /etc/jail.conf entry"
    echo "along with any /etc/fstab.jailname if used."
}

################################################################################
#### Main functions -- call parameter-handling and core functions

#-------------------------------------------------------------------------------
# Exit with Error
exerr () 
{ 
    echo -e "$*" >&2 ; 
    exit 1; 
}

#-------------------------------------------------------------------------------
# Using the command line, configuration file, and defaults,
# set all the parameters which are needed later.
get_params() {
    #	init_params
    parse_cmdline $@
    #	sanity_conffile
    #	default_conffile
    #	parse_conffile
    #	default_params
}



################################################################################
#### Entry point

# Make sure we find utilities from the base system
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:${PATH}

# Set LC_ALL in order to avoid problems with character ranges like [A-Z].
export LC_ALL=C

get_params $@
for COMMAND in ${COMMANDS}; do
    jcmd_${COMMAND}
done



################################################################################
#### Exit Normally
echo Jail Commands exiting normally.
